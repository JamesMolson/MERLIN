Earlier releases of Merlin did only take into account longitudinal and 
transverse cavity wakefields. With rel-4-0 the original scheme has been extended 
to handle more general kinds of wakefields, e.g. higher order wakefields in 
collimators (thanks to the work of Roger Barlow and Adriana Bungau,  EUROTeV-
2006-051  the class structure described in that paper differs from the rel-4-0 
implementation) and coupler wakefields (Dirk Kruecker et al., EUROTeV-2008-003 
and LCWS/ILC Chicago 2008. The coupler code also includes transverse kicks due 
to asymmetries in the cavity RF field). The new scheme is backward compatible 
and only implemented for ParticleTracking. There are three examples in this 
directory:

a) ex1.cpp: A simple tapered (resistive wall) collimator example.
b) ex2.cpp: Collimator wakefields combined with cavity wakefields 
c) ex3.cpp: A linac with coupler and cavity wakefields 

The new wakefield code consist in the following files
Merlin/AcceleratorModel/SpoilerPotentialModels.h|cpp
Merlin/BeamDynamics/ParticleTracking/SpoilerWakeProcess.h|cpp
Merlin/BeamDynamics/ParticleTracking/CouplerWakeFieldProcess.h|cpp
Merlin/AcceleratorModel/CombinedWakeRF.h
MerlinExample/Wakefields/TeslaCoupler.h

SpoilerPotentialModels implements examples of collimator wakepotentials; 
see A.M. Toader et al., EPAC08, Genua, WEPP161 for a collection of 
collimator wakefield formulae.

CombinedWakeRF defines an interface for wakefields and RF kicks 
depending on x,y and not just r. TeslaCoupler implements transverse 
wakefields and RF kicks according to I. Zagordnov and M. Dohlus, 
ILC/LCWS 07, Hamburg, talk and paper (several typos in the paper had 
been removed). The steady state solution is given in M.Dohlus, 
I.Zagorodnov, E.Gjonaj and T.Weiland, EPAC08, Genua, MOPP013.

CouplerWakeFieldProcess calculates the wakefield and RF kick effects 
of cavity and coupler at the same time to avoid multiple (time-comsuming) 
integrations over the bunch distribution.
